
==================== FINAL INTERFACE ====================
2016-03-10 02:05:23.957962 UTC

interface Uniqu_5QtIhs0FjutFZcRcUfSgP3:Data.List.UniqueStrict 7103
  interface hash: c6d596050eb817939441685ccd28848d
  ABI hash: e9a8d6e36cdb000edb352da89839a550
  export-list hash: cdf1fc4203bf367bb8cf4e70ca6f6108
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: bd9ac9eac0792d150567c26b1c275ef1
  sig of: Nothing
  used TH splices: False
  where
exports:
  Data.List.UniqueStrict.count
  Data.List.UniqueStrict.count_
  Data.List.UniqueStrict.repeated
  Data.List.UniqueStrict.repeatedBy
  Data.List.UniqueStrict.unique
module dependencies:
package dependencies: array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA
                      base-4.8.2.0* containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU*
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59 ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntMap.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntSet.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
import  -/  base-4.8.2.0:Data.Foldable 2ce969969ad5231eb40bd713f94f05ad
import  -/  base-4.8.2.0:Data.List 3f0782c8d4bf50eecefcd5ea1798aac8
import  -/  base-4.8.2.0:Data.OldList d8fd80b0e14aa085ce6219cd89dad356
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.List 0c736920522bbd14b770342776012ab6
import  -/  base-4.8.2.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntMap.Base 587954cac81382204fc5b4bd72428a66
import  -/  containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntMap.Strict 13253618bd968d8d0811652abfe39f52
import  -/  containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base 642e37808d03e24efbe8e8ff1336f343
import  -/  containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Strict 47720a1b98e2fcc2f040f344c61b35f5
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
3b1004ba0f9c5453acc94ca90d2735bf
  count :: GHC.Classes.Ord a => [a] -> [(a, GHC.Types.Int)]
  {- Arity: 2, Strictness: <L,U(A,C(C1(U)),A,A,A,A,A,A)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a $dOrd :: GHC.Classes.Ord a x1 :: [a] ->
                 Data.Map.Base.$fEqMap1
                   @ a
                   @ GHC.Types.Int
                   (GHC.Types.[] @ (a, GHC.Types.Int))
                   (Data.List.UniqueStrict.countMap @ a $dOrd x1)) -}
e38b4ec25fcbb6403f60705c31724b8b
  count1 :: a -> GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int
  {- Arity: 3, HasNoCafRefs,
     Unfolding: (\ @ a
                   ds :: a
                   x1 :: GHC.Types.Int[OneShot]
                   y :: GHC.Types.Int[OneShot] ->
                 GHC.Num.$fNumInt_$c+ x1 y) -}
e9dc2a86b99c0156c5d8b8a21acf2841
  countMap ::
    GHC.Classes.Ord a => [a] -> Data.Map.Base.Map a GHC.Types.Int
  {- Arity: 2, Strictness: <L,U(A,C(C1(U)),A,A,A,A,A,A)><S,1*U>,
     Unfolding: (\ @ a $dOrd :: GHC.Classes.Ord a eta :: [a] ->
                 Data.Map.Strict.fromListWithKey
                   @ a
                   @ GHC.Types.Int
                   $dOrd
                   (Data.List.UniqueStrict.count1 @ a)
                   (GHC.List.zip
                      @ a
                      @ GHC.Types.Int
                      eta
                      Data.List.UniqueStrict.count_xs)) -}
92371fbf0539f08895001aebb4893074
  count_ :: GHC.Classes.Ord a => [a] -> [(a, GHC.Types.Int)]
  {- Arity: 2, Strictness: <L,U(A,C(C1(U)),A,A,A,A,A,A)><S,1*U>,
     Unfolding: (\ @ a $dOrd :: GHC.Classes.Ord a x1 :: [a] ->
                 let {
                   lvl :: (a, GHC.Types.Int)
                          -> (a, GHC.Types.Int) -> GHC.Types.Ordering
                     {- Arity: 2 -}
                   = \ w3 :: (a, GHC.Types.Int) w4 :: (a, GHC.Types.Int)[OneShot] ->
                     case w3 of ww { (,) ww1 ww2 ->
                     case w4 of ww3 { (,) ww4 ww5 ->
                     case GHC.Classes.compare @ a $dOrd ww1 ww4 of wild {
                       GHC.Types.LT -> GHC.Types.LT
                       GHC.Types.EQ -> GHC.Classes.compareInt ww2 ww5
                       GHC.Types.GT -> GHC.Types.GT } } }
                 } in
                 letrec {
                   go2 :: [(a, Data.IntSet.Base.Key)]
                          -> Data.IntMap.Base.IntMap [a] -> [(a, Data.IntSet.Base.Key)]
                     {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
                   = \ z' :: [(a, Data.IntSet.Base.Key)]
                       ds :: Data.IntMap.Base.IntMap [a] ->
                     case ds of wild {
                       Data.IntMap.Base.Bin dt dt1 l r -> go2 (go2 z' r) l
                       Data.IntMap.Base.Tip dt x2
                       -> GHC.Base.++
                            @ (a, Data.IntSet.Base.Key)
                            (Data.OldList.sortBy
                               @ (a, Data.IntSet.Base.Key)
                               lvl
                               (GHC.List.zip
                                  @ a
                                  @ GHC.Types.Int
                                  x2
                                  (let {
                                     x3 :: GHC.Types.Int {- Strictness: m -} = GHC.Types.I# dt
                                   } in
                                   letrec {
                                     xs :: [GHC.Types.Int] = GHC.Types.: @ GHC.Types.Int x3 xs
                                   } in
                                   xs)))
                            z'
                       Data.IntMap.Base.Nil -> z' }
                 } in
                 case Data.IntMap.Strict.fromListWithKey
                        @ [a]
                        (Data.List.UniqueStrict.count_2 @ a)
                        (Data.List.UniqueStrict.count_1
                           @ a
                           (GHC.Types.[] @ (Data.IntSet.Base.Key, [a]))
                           (Data.List.UniqueStrict.countMap @ a $dOrd x1)) of wild {
                   DEFAULT -> go2 (GHC.Types.[] @ (a, Data.IntSet.Base.Key)) wild
                   Data.IntMap.Base.Bin dt dt1 l r
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<# dt1 0) of wild1 {
                        GHC.Types.False
                        -> go2 (go2 (GHC.Types.[] @ (a, Data.IntSet.Base.Key)) r) l
                        GHC.Types.True
                        -> go2 (go2 (GHC.Types.[] @ (a, Data.IntSet.Base.Key)) l) r } }) -}
480c951aa8e7ef39eba21e2f7b12f602
  count_1 ::
    [(Data.IntSet.Base.Key, [a])]
    -> Data.Map.Base.Map a GHC.Types.Int
    -> [(Data.IntSet.Base.Key, [a])]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><S,1*U> -}
580c1ab47df92d1c84cf9b43c6521a34
  count_2 :: Data.IntSet.Base.Key -> [a] -> [a] -> [a]
  {- Arity: 3, HasNoCafRefs,
     Unfolding: (\ @ a
                   ds :: Data.IntSet.Base.Key
                   x1 :: [a][OneShot]
                   y :: [a][OneShot] ->
                 GHC.Base.++ @ a x1 y) -}
af9260c1df667473f9dfd99b61f3926e
  count_xs :: [GHC.Types.Int]
  {- HasNoCafRefs, Strictness: m2 -}
a073e9f5696c126d501c7f7f879e6e3e
  repeated :: GHC.Classes.Ord a => [a] -> [a]
  {- Arity: 2, Strictness: <L,U(A,C(C1(U)),A,A,A,A,A,A)><S,1*U>,
     Unfolding: (\ @ a $dOrd :: GHC.Classes.Ord a eta :: [a] ->
                 Data.Map.Base.keys1
                   @ a
                   @ GHC.Types.Int
                   (GHC.Types.[] @ a)
                   (Data.Map.Base.filterWithKey
                      @ a
                      @ GHC.Types.Int
                      (Data.List.UniqueStrict.repeated1 @ a)
                      (Data.List.UniqueStrict.countMap @ a $dOrd eta))) -}
f07a65ee08e2a81c60a5498747e7ec1f
  repeated1 :: a -> GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (\ @ a ds :: a x1 :: GHC.Types.Int[OneShot] ->
                 case x1 of wild { GHC.Types.I# x2 ->
                 GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.># x2 1) }) -}
51953ac176ae77998e71721e0a7e4ef7
  repeatedBy ::
    GHC.Classes.Ord a =>
    (GHC.Types.Int -> GHC.Types.Bool) -> [a] -> [a]
  {- Arity: 3,
     Strictness: <L,U(A,C(C1(U)),A,A,A,A,A,A)><L,C(U)><S,1*U>,
     Unfolding: (\ @ a
                   $dOrd :: GHC.Classes.Ord a
                   p :: GHC.Types.Int -> GHC.Types.Bool
                   eta :: [a] ->
                 Data.Map.Base.keys1
                   @ a
                   @ GHC.Types.Int
                   (GHC.Types.[] @ a)
                   (Data.Map.Base.filterWithKey
                      @ a
                      @ GHC.Types.Int
                      (\ ds :: a x1 :: GHC.Types.Int[OneShot] -> p x1)
                      (Data.List.UniqueStrict.countMap @ a $dOrd eta))) -}
c8215bd3508146f1833d92860e8e6fc2
  unique :: GHC.Classes.Ord a => [a] -> [a]
  {- Arity: 2, Strictness: <L,U(A,C(C1(U)),A,A,A,A,A,A)><S,1*U>,
     Unfolding: (\ @ a $dOrd :: GHC.Classes.Ord a eta :: [a] ->
                 Data.Map.Base.keys1
                   @ a
                   @ GHC.Types.Int
                   (GHC.Types.[] @ a)
                   (Data.Map.Base.filterWithKey
                      @ a
                      @ GHC.Types.Int
                      (Data.List.UniqueStrict.unique1 @ a)
                      (Data.List.UniqueStrict.countMap @ a $dOrd eta))) -}
f0f757cb89accb0728fd354df9aaeb51
  unique1 :: a -> GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (\ @ a ds :: a x1 :: GHC.Types.Int[OneShot] ->
                 case x1 of wild { GHC.Types.I# x2 ->
                 case x2 of wild1 {
                   DEFAULT -> GHC.Types.False 1 -> GHC.Types.True } }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

